---
description: 
globs: 
alwaysApply: false
---
# Blender MCP Server Rule

The Blender MCP server, implemented in [addon.py](mdc:addon.py), provides a socket-based interface for external tools (such as AI agents or other clients) to interact with a running Blender instance. It enables remote procedure calls for scene inspection, asset import, code execution, and integration with external asset/model services (PolyHaven, Hyper3D Rodin).

## Key Features
- **Server Lifecycle**: The server can be started/stopped from the Blender UI panel ("Blender MCP" in the 3D Viewport sidebar) or programmatically. It listens on a configurable port (default: 9876).
- **Command Handling**: Receives JSON commands over TCP, dispatches them to handler methods (e.g., get_scene_info, download_polyhaven_asset, execute_code), and returns JSON responses.
- **Extensibility**: New commands can be added by extending the handler mapping in the `BlenderMCPServer` class. This allows for rapid prototyping and integration of new Blender automation features.
- **Asset Integration**: Supports direct download/import of assets from PolyHaven and Hyper3D Rodin, including textures, HDRIs, and 3D models, with automatic material and node setup.
- **Security**: Code execution is supported but should be used with caution, as it allows arbitrary Python code to run in the Blender context.

## Usage in Project Development
- **Automation**: Use the server to automate Blender tasks from external scripts, web apps, or AI agents by sending JSON commands over TCP.
- **Live Asset Import**: Integrate real-time asset search and import workflows into your pipeline, leveraging PolyHaven and Hyper3D APIs.
- **Custom Extensions**: Add new server commands for project-specific needs by implementing new handler methods in [addon.py](mdc:addon.py).
- **UI Integration**: The Blender MCP panel in the UI allows users to control server state and integration options without leaving Blender.

## Example Workflow
1. Enable the Blender MCP add-on in Blender.
2. Start the server from the sidebar panel.
3. Connect to the server from your client (e.g., Python script, web app) via TCP on the configured port.
4. Send JSON commands (see [addon.py](mdc:addon.py) for supported types) to query scene info, import assets, or execute code.
5. Receive and process JSON responses for integration into your pipeline or UI.

---
See [addon.py](mdc:addon.py) for full implementation details and available commands.
