---
description: Environment & World Setup (Three.js)
globs: 
alwaysApply: false
---
# Environment & World Setup (Three.js)

This document describes how to set up a realistic environment and lighting for visualizing the construction site using Three.js.

## Environment and Lighting Setup

### Sky Background
```javascript
// Create a sky gradient using Three.js Shader Material
const vertexShader = `
  varying vec3 vWorldPosition;
  void main() {
    vec4 worldPosition = modelMatrix * vec4(position, 1.0);
    vWorldPosition = worldPosition.xyz;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
  }
`;

const fragmentShader = `
  uniform vec3 topColor;
  uniform vec3 bottomColor;
  uniform float offset;
  uniform float exponent;
  varying vec3 vWorldPosition;
  void main() {
    float h = normalize(vWorldPosition + offset).y;
    gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0), exponent), 0.0)), 1.0);
  }
`;

// Create sky dome
const uniforms = {
  topColor: { value: new THREE.Color(0x0077ff) },
  bottomColor: { value: new THREE.Color(0xffffff) },
  offset: { value: 33 },
  exponent: { value: 0.6 }
};

const skyGeometry = new THREE.SphereGeometry(500, 32, 15);
const skyMaterial = new THREE.ShaderMaterial({
  uniforms: uniforms,
  vertexShader: vertexShader,
  fragmentShader: fragmentShader,
  side: THREE.BackSide
});

const sky = new THREE.Mesh(skyGeometry, skyMaterial);
scene.add(sky);
```

### Ground Plane
```javascript
// Create ground plane
const groundGeometry = new THREE.PlaneGeometry(60, 60, 32, 32);
groundGeometry.rotateX(-Math.PI / 2);
// Add subtle displacement for natural unevenness
const positionAttribute = groundGeometry.getAttribute('position');
for (let i = 0; i < positionAttribute.count; i++) {
  const y = 0.1 * Math.random(); // Reduce variation to prevent obscuring foundation
  positionAttribute.setY(i, y);
}
const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x6b8e23 });
const ground = new THREE.Mesh(groundGeometry, groundMaterial);
ground.receiveShadow = true;
scene.add(ground);
```

### Lighting

#### Main Sun Light
```javascript
// Create directional light for sun
const sunLight = new THREE.DirectionalLight(0xfff6e5, 1.5);
sunLight.position.set(15, 20, 15);
sunLight.castShadow = true;

// Shadow settings
sunLight.shadow.mapSize.set(1024, 1024);
sunLight.shadow.camera.near = 0.5;
sunLight.shadow.camera.far = 100;
scene.add(sunLight);
```

#### Ambient Light
```javascript
const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
scene.add(ambientLight);
```

## Camera Setup
```javascript
// Main camera and controls
const camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(20, 12, -20);
camera.lookAt(0, 0, 0);

const controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;
```

## Scene Organization
```javascript
const environmentGroup = new THREE.Group();
environmentGroup.name = 'Environment';
environmentGroup.add(sky, ground);

const lightingGroup = new THREE.Group();
lightingGroup.name = 'Lighting';
lightingGroup.add(sunLight, ambientLight);

scene.add(environmentGroup, lightingGroup);
```

## Foundation Visibility
- Ensure the foundation is thick enough to always be visible above ground variations.
- **Recommended Implementation:** Set the foundation Y position so that its bottom is at least 0.05m above the lowest point of the ground mesh. If using random ground displacement, calculate the minimum Y of the ground and set the foundation's Y accordingly:
  - Example: `foundation.position.y = groundMaxDisplacement + (foundation.height / 2) + 0.05;`
- Optionally, clamp or flatten the ground mesh directly beneath the foundation to guarantee no visual clipping.

---

**Implementation Reference**:  
Add these environment components to `src/environment/index.js` and import them into your main app for a consistent visual experience that enhances the construction animation. 