---
description: 
globs: 
alwaysApply: false
---
# Workflow & MCP Command Design

This project supports an end-to-end workflow for generating Studio Shed models in Three.js

## Workflow Overview
1. **Asset Analysis & Feature Extraction**
   - Convert hand-drawn blueprints to digital scans.
   - Categorize photos by building size and features.
   - Extract elements: door/window placement, roof pitch, panel dimensions, texture references.
   - Output a javascript block of code that can be used to generate the component. 

2. **Three.JS Generation Structure**
   - Use expert knowledge of Three.JS and useful plugins.

3. **Natural Language Prompt Template**
   - Accept prompts like:
     > "Create a [SIZE] Studio Shed model with: garage-style doors on north wall, [Y] double-hung windows per elevation, corrugated metal roof texture, separable wall panels labeled Front/Rear/Side1/Side2. Exclude fasteners and interior trim details."
   - Use an LLM or parser to convert prompts to JSON commands.

4. **Animation Preparation**
   - Commands to isolate wall panels as separate objects (e.g., `Panel_Front_12x8`).
   - Animate panels assembling over a frame range (e.g., 120 frames).
   - Implement animation logic in MCP handlers.

## Implementation Notes
- Preprocessing (image analysis, prompt parsing) is handled outside Blender; only structured commands are sent to MCP.
- Asset references (images, textures) should be accessible to Blender and referenced by path in commands.

---
See [addon.py](mdc:addon.py) for handler implementation and command extension.
